# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Python Release Build

on:
  pull_request:
    branches: ["main"]
  push:
    tags: ["*-rc*"]
    branches: ["branch-*"]

env:
  PYTHON_VERSION: "3.10"
  MATURIN_VERSION: "1.5.1"
  PROTOC_VERSION: "27.4"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff
      - name: Run Ruff
        run: |
          ruff check --output-format=github python/
          ruff format --check python/

  generate-license:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Generate license file
        run: python ./dev/create_license.py
      - uses: actions/upload-artifact@v4
        with:
          name: python-wheel-license
          path: LICENSE.txt

  build-wheels:
    needs: [generate-license]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact-name: dist-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact-name: dist-linux-aarch64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact-name: dist-macos-aarch64
          - os: macos-13
            target: x86_64-apple-darwin
            artifact-name: dist-macos-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact-name: dist-windows-x86_64

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: ${{ env.PROTOC_VERSION }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup build environment
        run: |
          python -m pip install --upgrade pip
          pip install maturin==${{ env.MATURIN_VERSION }}

      - name: Download LICENSE.txt
        run: rm -f LICENSE.txt
        shell: bash
      - uses: actions/download-artifact@v4
        with:
          name: python-wheel-license
          path: .

      - name: Build wheels
        run: |
          cd python
          cargo build --target ${{ matrix.target }}
          maturin build --release --strip --target ${{ matrix.target }}

      - name: List built wheels
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            dir python\target\wheels\
          else
            ls -la python/target/wheels/
          fi
        shell: bash

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: python/target/wheels/*

  build-sdist:
    needs: [generate-license]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: ${{ env.PROTOC_VERSION }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup build environment
        run: |
          python -m pip install --upgrade pip
          pip install maturin==${{ env.MATURIN_VERSION }}

      - name: Download LICENSE.txt
        run: rm -f LICENSE.txt
      - uses: actions/download-artifact@v4
        with:
          name: python-wheel-license
          path: .

      - name: Build source distribution
        run: |
          cd python
          cargo build
          maturin build --release --sdist --out dist --strip

      - name: Verify sdist build
        run: |
          if [ "$(ls -A python/target/wheels 2>/dev/null)" ]; then
            echo "Error: Sdist build generated wheels"
            exit 1
          else
            echo "âœ“ Sdist build is clean"
          fi

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: dist-sdist
          path: python/dist/*

  merge-artifacts:
    runs-on: ubuntu-latest
    needs: [build-wheels, build-sdist]
    steps:
      - name: Merge all build artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: dist
          pattern: dist-*

  # NOTE: PyPI publish needs to be done manually for now after release passed the vote
  # publish-pypi:
  #   name: Publish to PyPI
  #   needs: [merge-artifacts]
  #   runs-on: ubuntu-latest
  #   if: startsWith(github.ref, 'refs/tags/')
  #   environment: pypi
  #   permissions:
  #     id-token: write
  #   steps:
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: dist
  #         path: dist/
  #     - name: Publish to PyPI
  #       uses: pypa/gh-action-pypi-publish@release/v1