# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Rust

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

on:
  push:
  pull_request:

env:
  RUST_VERSION: stable
  PROTOC_VERSION: "21.4"
  RUSTFLAGS: "-C debuginfo=1"
  CARGO_HOME: "/github/home/.cargo"
  CARGO_TARGET_DIR: "/github/home/target"

jobs:
  build:
    name: Build Libraries on AMD64
    runs-on: ubuntu-latest
    container:
      image: amd64/rust
      env:
        RUSTFLAGS: ${{ env.RUSTFLAGS }}
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ runner.os }}-amd64-target-cache-${{ env.RUST_VERSION }}-${{ hashFiles('**/Cargo.lock') }}" >> $GITHUB_OUTPUT

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ${{ env.CARGO_HOME }}
          key: cargo-cache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: cargo-cache-

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.CARGO_TARGET_DIR }}
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: ${{ runner.os }}-amd64-target-cache-${{ env.RUST_VERSION }}-

      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-builder
        with:
          rust-version: ${{ env.RUST_VERSION }}

      - name: Build workspace in release mode
        run: |
          cargo build --release
          ls -l ${{ env.CARGO_TARGET_DIR }}/release

      - name: Save build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rust-artifacts
          path: |
            ${{ env.CARGO_TARGET_DIR }}/release/ballista-scheduler
            ${{ env.CARGO_TARGET_DIR }}/release/ballista-executor

  test-linux:
    name: Test Workspace on Linux
    needs: [build]
    runs-on: ubuntu-latest
    container:
      image: amd64/rust
      env:
        RUSTFLAGS: ${{ env.RUSTFLAGS }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install protobuf compiler
        run: |
          apt-get -qq update && apt-get -y -qq install protobuf-compiler
          protoc --version

      - name: Restore caches
        uses: ./.github/actions/restore-rust-cache
        with:
          cache-key: ${{ needs.build.outputs.cache-key }}

      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-builder
        with:
          rust-version: ${{ env.RUST_VERSION }}

      - name: Set test environment
        run: |
          echo "ARROW_TEST_DATA=$(pwd)/testing/data" >> $GITHUB_ENV
          echo "PARQUET_TEST_DATA=$(pwd)/parquet-testing/data" >> $GITHUB_ENV

      - name: Run tests
        run: cargo test --features=testcontainers

      - name: Test no-default-features compilation
        run: |
          cargo build -p ballista-scheduler -p ballista-executor -p ballista-core -p ballista --no-default-features

  test-ballista:
    name: Test Ballista on Linux
    needs: [build]
    runs-on: ubuntu-latest
    container:
      image: amd64/rust
      env:
        RUSTFLAGS: ${{ env.RUSTFLAGS }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install protobuf compiler
        run: |
          mkdir -p $HOME/d/protoc && cd $HOME/d/protoc
          curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v${{ env.PROTOC_VERSION }}/protoc-${{ env.PROTOC_VERSION }}-linux-x86_64.zip
          unzip protoc-${{ env.PROTOC_VERSION }}-linux-x86_64.zip
          echo "$HOME/d/protoc/bin" >> $GITHUB_PATH

      - name: Restore caches
        uses: ./.github/actions/restore-rust-cache
        with:
          cache-key: ${{ needs.build.outputs.cache-key }}

      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-builder
        with:
          rust-version: ${{ env.RUST_VERSION }}

      - name: Set test environment
        run: |
          echo "ARROW_TEST_DATA=$(pwd)/testing/data" >> $GITHUB_ENV
          echo "PARQUET_TEST_DATA=$(pwd)/parquet-testing/data" >> $GITHUB_ENV

      - name: Run Ballista tests
        run: |
          cd ballista
          cargo test --no-default-features --features standalone

  test-cross-platform:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            protoc-suffix: win64
            protoc-ext: .exe
          - os: macos-latest
            protoc-suffix: osx-x86_64
            protoc-ext: ""
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install protobuf compiler
        run: |
          mkdir -p $HOME/d/protoc && cd $HOME/d/protoc
          curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v${{ env.PROTOC_VERSION }}/protoc-${{ env.PROTOC_VERSION }}-${{ matrix.protoc-suffix }}.zip
          unzip protoc-${{ env.PROTOC_VERSION }}-${{ matrix.protoc-suffix }}.zip
          echo "$HOME/d/protoc/bin" >> $GITHUB_PATH
          protoc${{ matrix.protoc-ext }} --version

      - name: Setup Rust toolchain
        run: |
          rustup toolchain install ${{ env.RUST_VERSION }}
          rustup default ${{ env.RUST_VERSION }}
          rustup component add rustfmt

      - name: Set test environment
        shell: bash
        run: |
          echo "ARROW_TEST_DATA=$(pwd)/testing/data" >> $GITHUB_ENV
          echo "PARQUET_TEST_DATA=$(pwd)/parquet-testing/data" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C debuginfo=0" >> $GITHUB_ENV

      - name: Run tests
        run: cargo test

  verify-benchmarks:
    name: Verify Benchmark Results
    needs: [build]
    runs-on: ubuntu-latest
    container:
      image: amd64/rust
      env:
        RUSTFLAGS: ${{ env.RUSTFLAGS }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install protobuf compiler
        run: |
          apt-get -qq update && apt-get -y -qq install protobuf-compiler
          protoc --version

      - name: Restore caches
        uses: ./.github/actions/restore-rust-cache
        with:
          cache-key: ${{ needs.build.outputs.cache-key }}

      - name: Setup Rust toolchain
        uses: ./.github/actions/setup-builder
        with:
          rust-version: ${{ env.RUST_VERSION }}

      - name: Verify benchmark results
        run: |
          cargo test --package ballista-benchmarks --profile release-nonlto --features=ci -- --test-threads=1

  quality-checks:
    name: Code Quality
    runs-on: ubuntu-latest
    container:
      image: amd64/rust
    strategy:
      matrix:
        check: [lint, clippy, cargo-toml]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: ${{ matrix.check != 'lint' }}

      - name: Setup Rust toolchain
        run: |
          rustup toolchain install ${{ env.RUST_VERSION }}
          rustup default ${{ env.RUST_VERSION }}
          rustup component add rustfmt clippy

      - name: Cache dependencies (non-lint)
        if: matrix.check != 'lint'
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.CARGO_HOME }}
            ${{ env.CARGO_TARGET_DIR }}
          key: quality-${{ matrix.check }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            quality-${{ matrix.check }}-
            cargo-cache-

      - name: Run lint checks
        if: matrix.check == 'lint'
        run: ci/scripts/rust_fmt.sh

      - name: Run clippy
        if: matrix.check == 'clippy'
        run: ci/scripts/rust_clippy.sh

      - name: Check Cargo.toml formatting
        if: matrix.check == 'cargo-toml'
        run: |
          which cargo-tomlfmt || cargo install cargo-tomlfmt
          ci/scripts/rust_toml_fmt.sh
          if test -f "./Cargo.toml.bak"; then
              echo "cargo tomlfmt found format violations"
              exit 1
          fi

  # Coverage job was failing. https://github.com/apache/arrow-datafusion/issues/590 tracks re-instating it
  # coverage:
  #   name: Coverage
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true
  #     - name: Setup Rust
  #       uses: dtolnay/rust-toolchain@stable
  #     - name: Install cargo-tarpaulin
  #       uses: taiki-e/install-action@cargo-tarpaulin
  #     - name: Set test environment
  #       run: |
  #         echo "ARROW_TEST_DATA=$(pwd)/testing/data" >> $GITHUB_ENV
  #         echo "PARQUET_TEST_DATA=$(pwd)/parquet-testing/data" >> $GITHUB_ENV
  #     - name: Run coverage
  #       run: cargo tarpaulin --out xml
  #     - name: Upload coverage reports
  #       uses: codecov/codecov-action@v4
  #       with:
  #         file: ./cobertura.xml
  #         fail_ci_if_error: false